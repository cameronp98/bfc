{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Progrm",
				"Program_reduce"
			],
			[
				"stk_max",
				"STK_MAX"
			],
			[
				"BUFFER_",
				"BUFFER_SIZE_MAX"
			],
			[
				"bfc",
				"bfc_buffer_size"
			],
			[
				"STAKC",
				"STACK_SIZE_MAX"
			],
			[
				"STACK",
				"STACK_SIZE_MAX"
			],
			[
				"Operati",
				"operation_t"
			],
			[
				"Prog",
				"Program_add"
			],
			[
				"Opera",
				"Operation_new"
			],
			[
				"replace",
				"replaceExtension"
			],
			[
				"operat",
				"operator_table"
			],
			[
				"flush",
				"flush_decrements"
			],
			[
				"nex",
				"nextc1"
			],
			[
				"nect",
				"nextc2"
			],
			[
				"nec",
				"nextc2"
			],
			[
				"fp",
				"fp"
			],
			[
				"TAPE_",
				"TAPE_PTR_REG"
			],
			[
				"TAP",
				"TAPE_PTR_REG"
			],
			[
				"scren",
				"screen_width"
			],
			[
				"str",
				"string"
			],
			[
				"random",
				"random_at_most"
			],
			[
				"getHead",
				"getHeadphoneVolume"
			],
			[
				"elemen",
				"elements"
			],
			[
				"parse_",
				"parse_chemical_formula"
			],
			[
				"program",
				"program_size"
			],
			[
				"prog",
				"program_size"
			],
			[
				"Matr",
				"Matrix4f_Multiply"
			],
			[
				"m",
				"m"
			],
			[
				"Dispen",
				"Dispenser_new"
			],
			[
				"repeat",
				"repeat_modify_storage"
			],
			[
				"repea",
				"repeat_modify"
			],
			[
				"Adjacenc",
				"AdjacencyList_add"
			],
			[
				"Adj",
				"AdjacencyPair"
			],
			[
				"Adjacen",
				"AdjacencyList"
			],
			[
				"expan",
				"expanded_str"
			],
			[
				"Vec",
				"Vector_set"
			],
			[
				"max_",
				"max_salary"
			],
			[
				"symbol",
				"symbol_table"
			],
			[
				"symbo",
				"symbol_table"
			],
			[
				"_infix_v",
				"_infix_eval_atom"
			],
			[
				"Orderd",
				"OrderedClass"
			],
			[
				"dire",
				"Direction"
			],
			[
				"size",
				"min_size"
			],
			[
				"ent_sea",
				"ent_search_keypress"
			],
			[
				"traffi",
				"TrafficLight"
			],
			[
				"Tra",
				"TrafficLight"
			],
			[
				"DRAW_IN",
				"DRAW_INTERVAL_CHANGE"
			],
			[
				"DRAW",
				"FLASH_DRAW_INTERVAL"
			],
			[
				"R",
				"R64_CHAR_START"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/User/c99.sublime-build",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"syn c",
				"Set Syntax: C"
			],
			[
				"rename",
				"ANF: Rename File"
			],
			[
				"snippet",
				"Snippet: #ifndef … #define … #endif"
			],
			[
				"SYN C",
				"Set Syntax: C"
			],
			[
				"delete",
				"File: Delete"
			],
			[
				"delett",
				"ANF: Delete Current File"
			],
			[
				"sync ",
				"Set Syntax: C"
			],
			[
				"delte",
				"File: Delete"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"delee",
				"File: Delete"
			],
			[
				"syn brai",
				"Set Syntax: Brainfuck"
			],
			[
				"syn pytn",
				"Set Syntax: Python3"
			],
			[
				"syn py",
				"Set Syntax: Python"
			],
			[
				"syn assem",
				"Set Syntax: Assembly x86 (MASM compatible)"
			],
			[
				"syn assembl",
				"Set Syntax: Assembly x86 (MASM compatible)"
			],
			[
				"anf",
				"ANF: New File"
			],
			[
				"rena",
				"ANF: Rename File"
			],
			[
				"del",
				"File: Delete"
			],
			[
				"assembly",
				"Set Syntax: Assembly x86 (MASM compatible)"
			],
			[
				"syn ass",
				"Set Syntax: ARM Assembly"
			],
			[
				"remove",
				"Package Control: Remove Package"
			]
		],
		"width": 435.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/cameron/code/c/bfc"
	],
	"file_history":
	[
		"/home/cameron/code/c/bfc/util.c",
		"/home/cameron/code/c/bfc/util.h",
		"/home/cameron/code/c/bfc/program.h",
		"/home/cameron/code/c/bfc/bfc",
		"/home/cameron/code/c/bfc/program.o",
		"/home/cameron/code/c/bfc/util.o",
		"/home/cameron/code/c/bfc/bfc.o",
		"/home/cameron/code/c/bfc/error.c",
		"/home/cameron/code/c/bfc/error.h",
		"/home/cameron/code/c/snippets/error.c",
		"/home/cameron/code/c/program.h",
		"/home/cameron/code/c/test.c",
		"/home/cameron/code/c/base64/test",
		"/home/cameron/code/c/bfcomp/v3/test.bf",
		"/home/cameron/code/c/bfcomp/v2/compile.c",
		"/home/cameron/code/c/bfcomp/v2/test.c",
		"/home/cameron/code/c/bfcomp/v3/test.c",
		"/home/cameron/code/c/bfcomp/v2/programs/test.bf",
		"/home/cameron/code/c/bfcomp/v2/bfc.out",
		"/home/cameron/code/c/bfcomp/v2/programs/test.s",
		"/home/cameron/code/c/bfcomp/v2/test.s",
		"/home/cameron/code/c/bfcomp/v2/programs/test.bf.s",
		"/home/cameron/code/c/bfcomp/v2/test.bf.txt",
		"/home/cameron/code/c/source.txt",
		"/home/cameron/code/c/gl/OpenGL-tutorial_v0014_33/misc05_picking/misc05_picking_slow_easy.cpp",
		"/home/cameron/code/c/bfcomp/bfc/bfc/parser/brainfuck.py",
		"/home/cameron/code/c/bfcomp/bfc/bfc/nodes.py",
		"/home/cameron/code/c/bfcomp/v2/mandelbrot.asm",
		"/home/cameron/code/c/bfcomp/v2/test.asm",
		"/home/cameron/code/c/bfcomp/v2/test.bf",
		"/home/cameron/code/c/bfcomp/v1/compile.c",
		"/home/cameron/code/c/bfcomp/v2/main.c",
		"/home/cameron/code/c/bfcomp/v1/test.bf",
		"/home/cameron/code/c/bfcomp/v1/out.asm",
		"/home/cameron/code/c/bfcomp/v1/bftoc.bf",
		"/home/cameron/code/c/bfcomp/v1/mandelbrot.bf",
		"/home/cameron/code/c/a.out",
		"/home/cameron/code/c/.test.c.swp",
		"/home/cameron/code/c/misc/brainfuck_compiler.c",
		"/home/cameron/code/c/misc/brainfuck.c",
		"/home/cameron/code/c/brainfuck/brainfuck.c",
		"/home/cameron/code/c/misc/bfcomp2.c",
		"/home/cameron/code/c/bfcomp/v1/lone_wolf.bf",
		"/home/cameron/code/c/bfcomp/v2/program.h",
		"/home/cameron/code/c/bfcomp/v2/error.c",
		"/home/cameron/code/c/bfcomp/v2/program.c",
		"/home/cameron/code/c/bfcomp/v2/error.h",
		"/home/cameron/code/c/bfcomp/out.asm",
		"/home/cameron/code/c/bfcomp/hello_world.bf",
		"/home/cameron/code/c/bfcomp/test.bf",
		"/home/cameron/code/c/bfcomp/mandelbrot.bf",
		"/home/cameron/code/c/bfcomp/compile.c",
		"/home/cameron/code/c/test.bf",
		"/home/cameron/code/c/bfcomp/compile",
		"/home/cameron/code/c/bfcomp/compiler.c",
		"/home/cameron/code/c/bfcomp/out",
		"/home/cameron/code/c/bfcomp/test.c",
		"/home/cameron/code/c/bfcomp/test.asm",
		"/home/cameron/code/c/bfcomp/bf.asm",
		"/home/cameron/code/c/bfcomp/bf.o",
		"/home/cameron/code/c/bfcomp/bf",
		"/home/cameron/code/c/misc/brainfuck_compiler",
		"/home/cameron/code/c/brainfuck/brainfuck",
		"/home/cameron/code/c/snippets/randrange.c",
		"/home/cameron/code/c/misc/dungeon.c",
		"/home/cameron/code/c/misc/brainfuck.bin",
		"/home/cameron/code/c/misc/brainfuck.asm",
		"/home/cameron/code/c/brainfuck.asm",
		"/home/cameron/code/c/chemparser.c",
		"/home/cameron/code/c/misc/tokenize.c",
		"/home/cameron/code/c/gl/OpenGL-tutorial_v0014_33/external/AntTweakBar-1.16/src/TwOpenGL.cpp",
		"/home/cameron/code/c/chemparser.h",
		"/home/cameron/code/c/chemparser.py",
		"/home/cameron/code/c/cpu/cpu.c",
		"/home/cameron/code/c/cpu/cpu.h",
		"/home/cameron/code/c/misc/cpu",
		"/home/cameron/code/c/gl/OpenGL-tutorial_v0014_33/tutorial01_first_window/screenshots/CMake.PNG",
		"/home/cameron/code/c/coins",
		"/home/cameron/code/c/cpu/stack.c",
		"/home/cameron/code/c/cpu/stack.h",
		"/home/cameron/code/c/cpu/new_cpu.h",
		"/home/cameron/code/c/cpu/new_cpu.c",
		"/home/cameron/code/c/misc/cpu.c",
		"/home/cameron/code/c/gl/hw.c",
		"/home/cameron/.config/sublime-text-3/Packages/User/C99_gl.sublime-build",
		"/home/cameron/code/c/gl/OpenGL-tutorial_v0014_33/tutorial01_first_window/tutorial01.cpp",
		"/home/cameron/.config/sublime-text-3/Packages/User/CPP_gl.sublime-build",
		"/home/cameron/code/c/gl/test.c",
		"/home/cameron/code/c/base64/test.c",
		"/home/cameron/code/c/linux/fs/proc/base.c",
		"/home/cameron/code/c/linux/fs/ext2/balloc.c",
		"/home/cameron/code/c/sdl/test.c",
		"/home/cameron/code/c/sdl/test",
		"/home/cameron/code/c/linux/drivers/scsi/sd_ioctl.c",
		"/home/cameron/code/c/linux/drivers/scsi/scsi_debug.c",
		"/home/cameron/.config/sublime-text-3/Packages/User/c99.sublime-build",
		"/home/cameron/.config/sublime-text-3/Packages/User/C99_SDL2.sublime-build",
		"/home/cameron/code/c/words.txt",
		"/home/cameron/code/c/hashmap.c",
		"/home/cameron/code/c/hash_table/hashtable.c",
		"/home/cameron/code/c/misc/hw.bf",
		"/home/cameron/code/c/misc/hashtable",
		"/home/cameron/code/c/misc/hashmap",
		"/home/cameron/code/c/fs/data",
		"/home/cameron/code/c/linux/include/linux/major.h",
		"/home/cameron/code/c/hash_table/test.c",
		"/home/cameron/code/c/misc/test.c",
		"/home/cameron/code/c/linux/kernel/traps.c",
		"/home/cameron/code/c/gravity/entity.h",
		"/home/cameron/code/c/gravity/entity.c",
		"/home/cameron/code/c/gravity/vector.h",
		"/home/cameron/code/c/gravity/vector.c",
		"/home/cameron/code/c/gravity/main.c",
		"/home/cameron/code/c/misc/gravity.c",
		"/home/cameron/code/c/misc/gravity.s",
		"/home/cameron/code/c/linux/boot/head.S",
		"/home/cameron/code/c/misc/gravity",
		"/home/cameron/code/c/brainfuck/test.asm",
		"/home/cameron/code/c/simulation/test.c",
		"/home/cameron/code/c/misc/towers.c",
		"/home/cameron/code/c/misc/fs.dat",
		"/home/cameron/code/c/misc/filesys.c",
		"/home/cameron/code/c/coins.c",
		"/home/cameron/code/c/misc/terrain.c",
		"/home/cameron/code/c/misc/test.bf",
		"/home/cameron/code/c/misc/test.py",
		"/home/cameron/code/c/misc/test.bf.dat",
		"/home/cameron/code/c/misc/test.bf.bin"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/cameron/code/c/bfc",
			"",
			"/home/cameron/code/",
			"/home/cameron/code/c/",
			"/home/cameron/code/c/misc",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"realloc",
			"max_len",
			"data",
			"p->data",
			"static const size_t ",
			"stack",
			"buffer",
			"BUF_MIN",
			"#define ",
			"BUFFER_SIZE_MAX",
			"STACK_SIZE_MAX",
			"BUFFER_SIZE_MIN",
			"STACK_SIZE_MIN",
			"stack_size",
			"error(",
			"bfc_alloc",
			"argptr",
			"bfc_error",
			"STACK_SIZE",
			"unsigned",
			"error",
			"temp",
			"int",
			"Structure",
			"instruction_t",
			"inst",
			"Instruction",
			"item",
			"List",
			"list",
			"	\n",
			"path",
			"object_path",
			"()",
			"path",
			"output_path",
			"input_file",
			"path",
			"ofile",
			"ifile",
			"link",
			"outpath",
			"fromFile",
			"getFromFile",
			"Program_read",
			"void",
			"BC_CLEAR",
			"BC_REMAINDER",
			"BC_CLEAR",
			"0",
			"int",
			"zu",
			"realloc",
			"dec 2\\nput\\nmvl 3\\nput",
			"int",
			"uint32_t",
			"int",
			"uint16_t",
			"bc_op",
			"Program",
			"Operation",
			"int",
			"size_t",
			"OpType",
			";\n",
			"functions",
			".asm",
			"-1",
			"void",
			"replaceExtension",
			"COMMAND_SIZE",
			"128",
			"void",
			"assemble",
			"cmd_size",
			"printf",
			"new_path",
			"assemble",
			"max_command_size",
			"255",
			"input_path",
			"output_path",
			"src",
			"fout",
			"loop",
			"fout",
			"lastc",
			"STK_SIZE",
			"BUF_SIZE",
			"fout",
			"malloc",
			"Instruction",
			"op",
			"*op",
			"operation",
			"Operation",
			"rindex",
			"input_path",
			"output_path",
			">\n",
			"first",
			";\n",
			"tadd",
			"return",
			"lastc",
			"'[':\n",
			"fp,",
			"fp",
			"tdec",
			"tinc",
			"mov",
			";\n",
			"lastc",
			"operator_map",
			"op_map",
			"Op",
			"op",
			"Op",
			"get_instructions",
			"mov byte [ebx],",
			"mov_increments",
			"just_set_zero",
			"printf",
			"fp",
			"increments",
			"\");\n",
			"skip_next_endloop",
			"in_set_zero"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"die",
			".s",
			"cpu->cr",
			"cpu->dm",
			"cpu->dc",
			"cpu->ca",
			"token.tag",
			"	",
			"\\t",
			"orange",
			"List",
			"self"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"follow_symlinks": true,
			"path": "/home/cameron/code/c/bfc"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 135.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"error",
				"snippets/error.c"
			],
			[
				"test.c",
				"test.c"
			],
			[
				"error.c",
				"snippets/error.c"
			],
			[
				"brainfuck_compiler",
				"misc/brainfuck_compiler.c"
			],
			[
				"bfcomp/test.c",
				"bfcomp/test.c"
			],
			[
				"tokeni",
				"misc/tokenize.c"
			],
			[
				"cpu.c",
				"cpu/cpu.c"
			],
			[
				"erro",
				"snippets/error.c"
			],
			[
				"base64",
				"base64/test.c"
			],
			[
				"sdl/te",
				"sdl/test.c"
			],
			[
				"hashmap.c",
				"hashmap.c"
			],
			[
				"hash",
				"hash_table/hashtable.c"
			],
			[
				"gra.s",
				"misc/gravity.s"
			],
			[
				"gravity.s",
				"misc/gravity.s"
			],
			[
				"brainfuck",
				"misc/brainfuck.c"
			],
			[
				"test.py",
				"misc/test.py"
			],
			[
				"test.bf.dat",
				"misc/test.bf.dat"
			],
			[
				"braincufk",
				"brainfuck/brainfuck"
			],
			[
				"factorial",
				"misc/factorial.bf"
			],
			[
				"factorial.",
				"misc/factorial.bf"
			],
			[
				"bfcomp2",
				"misc/bfcomp2.c"
			],
			[
				"test.bf",
				"misc/test.bf"
			],
			[
				"tes.",
				"test.c"
			],
			[
				".bf",
				"misc/factorial.bf"
			],
			[
				"test.s",
				"test.s"
			],
			[
				"testcpp",
				"misc/test_cpp.c"
			],
			[
				"t",
				"base64/test"
			],
			[
				"misc/test.c",
				"misc/test.c"
			],
			[
				"test.bf.c",
				"misc/test.bf.c"
			],
			[
				"hw.bf",
				"misc/hw.bf.c"
			],
			[
				"hw.b",
				"misc/hw.bf"
			],
			[
				"out.bf",
				"misc/out.bf.c"
			],
			[
				"hw.",
				"misc/hw.bf"
			],
			[
				"braincu",
				"brainfuck/brainfuck.c"
			],
			[
				"zero_",
				"misc/zero_to_nine.b"
			],
			[
				"errpr",
				"linux/drivers/FPU-emu/reg_compare.c"
			],
			[
				"csv_",
				"tkinter/csv_search.py"
			],
			[
				"test.tx",
				"misc/test.txt"
			],
			[
				"test",
				"calculator/test.py"
			],
			[
				"lexer",
				"calculator/lexer.py"
			],
			[
				"alice",
				"misc/data/alice11_reversed.txt"
			],
			[
				"hashmap",
				"c/misc/hashmap"
			],
			[
				"malloc",
				"c/linux/lib/malloc.c"
			],
			[
				"",
				"c/test.c"
			],
			[
				"load_",
				"python/misc/load_gs_queue.py"
			],
			[
				"htable",
				"c/misc/htable.c"
			],
			[
				"pyt",
				"c/linux/drivers/FPU-emu/poly_tan.c"
			],
			[
				"delete",
				"c/linux/include/linux/if_ether.h"
			],
			[
				"htabl",
				"c/misc/htable.c"
			],
			[
				"groove",
				"python/misc/grooveshark_songs.txt"
			],
			[
				"groo",
				"python/misc/grooveshark_songs"
			],
			[
				"load",
				"python/misc/load_gs_queue.py"
			],
			[
				"g",
				"python/misc/grooveshark_songs"
			],
			[
				"wrod",
				"python/misc/word_hashes.txt"
			],
			[
				"string",
				"python/misc/string_match_1.py"
			],
			[
				"tet.py",
				"python/lisp/test.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/code/python/python.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 260.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
